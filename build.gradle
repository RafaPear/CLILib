import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.20'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '2.0.0'
}

group = 'pt.rafap.clilib'
version = '1.5-Beta'

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'org.jetbrains.dokka'
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    implementation("org.json:json:20231013")
    implementation("net.java.dev.jna:jna:5.17.0")           // JNA core
    implementation("net.java.dev.jna:jna-platform:5.17.0")  // funcionalidades extra
    implementation 'org.jline:jline:3.30.0'
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

// directoria para guardar o ficheiro version.properties gerado
def generatedVersionDir = layout.buildDirectory.dir('generated-version').get().asFile.path

sourceSets {
    main {
        java.srcDirs += 'src/main/java'
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
    example {
        kotlin.srcDir("src/example/kotlin")
        resources.srcDir("src/example/resources")
        compileClasspath += sourceSets.main.output + configurations.runtimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

// gera ficheiro version.properties em tempo de build
tasks.register('generateVersionProperties') {
    doLast {
        def propertiesFile = file("${generatedVersionDir}/version.properties")
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty('version', rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}

processResources.dependsOn tasks.named('generateVersionProperties')

// adiciona javadoc gerado pela Dokka ao artefacto javadocJar
project.afterEvaluate {
    def dokkaTaskCandidate = tasks.findByName('dokkaJavadoc')
    if (dokkaTaskCandidate == null) dokkaTaskCandidate = tasks.findByName('dokkaGenerate')
    if (dokkaTaskCandidate == null) dokkaTaskCandidate = tasks.find { it.name?.startsWith('dokka') }

    def dokkaGenerateTask = tasks.findByName('dokkaGenerate')
    if (dokkaGenerateTask != null) {
        tasks.named('javadocJar') {
            dependsOn dokkaGenerateTask
            from(layout.buildDirectory.dir('dokka/html'))
        }
        tasks.named('jar') {
            dependsOn dokkaGenerateTask
            from(layout.buildDirectory.dir('dokka/html')) {
                into('docs')
            }
        }
    }

    if (dokkaTaskCandidate != null) {
        tasks.named('javadocJar') {
            dependsOn dokkaTaskCandidate
            if (dokkaTaskCandidate.hasProperty('outputDirectory')) {
                from(dokkaTaskCandidate.outputDirectory)
            }
        }

        tasks.named('jar') {
            dependsOn dokkaTaskCandidate
            if (dokkaTaskCandidate.hasProperty('outputDirectory')) {
                from(dokkaTaskCandidate.outputDirectory) {
                    into('docs')
                }
            }
        }
    } else {
        logger.warn('Nenhuma task Dokka encontrada; javadocJar/jar n√£o ir√£o incluir documenta√ß√£o Dokka.')
    }
}

// evita falhas por ficheiros duplicados em todas as tasks do tipo Jar
tasks.withType(org.gradle.api.tasks.bundling.Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

kotlin {
    jvmToolchain(21)
}

// task de exemplo para correr a CLI
tasks.register("runExample", JavaExec) {
    group = "application"
    description = "Runs the CLI example"
    classpath = sourceSets.example.runtimeClasspath
    mainClass.set("MainKt")
}

// üîπ Task Dokka HTML robusta para workflow
tasks.register("dokkaHtml") {
    group = "documentation"
    description = "Gera documenta√ß√£o Dokka para o projeto e consolida tudo em build/dokka/html"

    // Prefer the aggregated dokkaGenerate task when available, otherwise depend on any DokkaTask
    if (tasks.findByName('dokkaGenerate') != null) {
        dependsOn tasks.named('dokkaGenerate')
    } else {
        dependsOn tasks.withType(org.jetbrains.dokka.gradle.DokkaTask)
    }

    doLast {
        def destDir = layout.buildDirectory.dir('dokka/html').get().asFile

        // Cleanup destination
        if (destDir.exists()) destDir.deleteDir()
        destDir.mkdirs()

        // Gather candidate source directories from Dokka tasks' outputDirectory properties
        def sources = [] as List
        tasks.withType(org.jetbrains.dokka.gradle.DokkaTask).each { t ->
            try {
                if (t.hasProperty('outputDirectory')) {
                    def out = t.outputDirectory.get().asFile
                    if (out.exists()) sources << out
                }
            } catch (Exception ignored) {
                // ignore inaccessible or unset outputs
            }
        }

        // If we didn't find any task outputs, fall back to common build/dokka locations
        if (sources.isEmpty()) {
            def htmlDir = layout.buildDirectory.dir('dokka/html').get().asFile
            def dokkaDir = layout.buildDirectory.dir('dokka').get().asFile
            if (htmlDir.exists()) sources << htmlDir
            else if (dokkaDir.exists()) sources << dokkaDir
        }

        // Copy all files (HTML, CSS, JS, images, ui-kit, etc.) preserving directory structure
        sources.unique().each { src ->
            copy {
                from src
                into destDir
                include '**/*'
            }
        }

        println("‚úÖ Dokka HTML consolidado em: ${destDir}")
    }
}

// for√ßa sa√≠da de todas as DokkaTasks para build/dokka/html
tasks.withType(DokkaTask).configureEach {
    outputDirectory.set(layout.buildDirectory.dir("dokka/html"))
}

// Publica√ß√£o autom√°tica no Maven Local
tasks.named("build") {
    finalizedBy(tasks.named("publishToMavenLocal"))
}

publishing {
    publications {
        create("gpr", MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/RafaPear/CLILib")
            credentials {
                username = System.getenv("USERNAME") ?: findProperty("gpr.user")?.toString() ?: ""
                password = System.getenv("TOKEN") ?: findProperty("gpr.key")?.toString() ?: ""
            }
        }
    }
}
