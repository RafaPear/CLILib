plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.20'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '1.9.20'
}

group = 'pt.rafap.clilib'
version = '1.5-Beta'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    implementation("org.json:json:20231013")
    implementation("net.java.dev.jna:jna:5.17.0")           // JNA core
    implementation("net.java.dev.jna:jna-platform:5.17.0")  // funcionalidades extra (opcional mas recomendado)
    implementation 'org.jline:jline:3.30.0'
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

// directoria para guardar o ficheiro version.properties gerado
def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        java.srcDirs += 'src/main/java'
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
    example {
        kotlin.srcDir("src/example/kotlin")
        resources.srcDir("src/example/resources")
        compileClasspath += sourceSets.main.output + configurations.runtimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

// gera ficheiro version.properties em tempo de build
task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties

// adiciona javadoc gerado pela Dokka ao artefacto javadocJar
// (o duplicatesStrategy √© herdado da configura√ß√£o global definida mais abaixo)
tasks.named('javadocJar') {
    dependsOn tasks.named('dokkaJavadoc')
    from(tasks.named('dokkaJavadoc').get().outputDirectory)
}

// inclui a documenta√ß√£o Dokka dentro do JAR principal em docs/
tasks.named('jar') {
    dependsOn tasks.named('dokkaJavadoc')
    from(tasks.named('dokkaJavadoc').get().outputDirectory) {
        into('docs')
    }
}

// üîë Solu√ß√£o global: evita falhas por ficheiros duplicados em *todas* as tasks do tipo Jar
// Isto resolve o problema visto em sourcesJar e quaisquer outros casos semelhantes
// Valores poss√≠veis: FAIL (default), EXCLUDE, INCLUDE, WARN
import org.gradle.api.tasks.bundling.Jar

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

kotlin {
    jvmToolchain(21)
}

// task de exemplo para correr a CLI
tasks.register("runExample", JavaExec) {
    group = "application"
    description = "Runs the CLI example"
    classpath = sourceSets.example.runtimeClasspath
    mainClass.set("MainKt")
}

// Publica√ß√£o autom√°tica no Maven Local para uso noutros projectos
// que dependam desta biblioteca
tasks.named("build") {
    finalizedBy(tasks.named("publishToMavenLocal"))
}

publishing {
    publications {
        create("gpr", MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/RafaPear/CLILib")
            credentials {
                username = System.getenv("USERNAME") ?: findProperty("gpr.user")?.toString() ?: ""
                password = System.getenv("TOKEN") ?: findProperty("gpr.key")?.toString() ?: ""
            }
        }
    }
}
